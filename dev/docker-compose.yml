version: '3.8'

networks:
  aevatar-network:
    driver: bridge

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    networks:
      - aevatar-network
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=AevatarDb

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - aevatar-network
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    networks:
      - aevatar-network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka-data:/bitnami/kafka

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    networks:
      - aevatar-network
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    networks:
      - aevatar-network
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    networks:
      - aevatar-network
    ports:
      - "16686:16686"  # UI
      - "14250:14250"  # Collector
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: otel-collector
    networks:
      - aevatar-network
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4315:4315"  # OTLP gRPC
      - "9090:9090"  # Prometheus exporter
    depends_on:
      - jaeger

  # Add a proper Prometheus server
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - aevatar-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"  # Using 9091 on host to avoid conflict with otel-collector
    depends_on:
      - otel-collector

  # Add Grafana for better visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - aevatar-network
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  mongodb-data:
  redis-data:
  kafka-data:
  elasticsearch-data:
  qdrant-data:
  prometheus-data:
  grafana-data: