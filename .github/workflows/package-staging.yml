name: Package Staging

on:
  push:
    branches:
      - "release/*"
      - "feature/*"

run-name: Deploy Aevatar Services to Staging from ${{ github.sha }}

env:
  DOTNET_INSTALL_DIR: "./.dotnet"

concurrency:
  group: workflow-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-build-and-push-image:
    runs-on: aismart-runner
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
    strategy:
      matrix:
        include:
          - name: SignalRSample.Client
            path: samples/SignalRSample.Client
            dockerfile: samples/SignalRSample.Client/Dockerfile
            project_root: signalR
          - name: SignalRSample.Host
            path: samples/SignalRSample.Host
            dockerfile: samples/SignalRSample.Host/Dockerfile
            project_root: signalR
          - name: Aevatar.HttpApi.Host
            path: src/Aevatar.HttpApi.Host
            dockerfile: src/Aevatar.HttpApi.Host/Dockerfile
            project_root: station
          - name: Aevatar.Silo
            path: src/Aevatar.Silo
            dockerfile: src/Aevatar.Silo/Dockerfile
            project_root: station
          - name: Aevatar.AuthServer
            path: src/Aevatar.AuthServer
            dockerfile: src/Aevatar.AuthServer/Dockerfile
            project_root: station
          - name: Aevatar.WebHook.Host
            path: src/Aevatar.WebHook.Host
            dockerfile: src/Aevatar.WebHook.Host/Dockerfile
            project_root: station
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet Packages
        id: nuget-packages
        uses: actions/cache@v4
        env:
          cache-name: nuget-package-cache
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.name }}
      - name: List NuGet Packages
        if: ${{ steps.nuget-packages.outputs.cache-hit == 'true' }}
        continue-on-error: true
        run: ls -lh ~/.nuget/packages
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "short_sha=$calculatedSha" >> "$GITHUB_OUTPUT"
      - name: Create image tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REPOSITORY_REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPOSITORY }}/${{ matrix.name }}
          tags: |
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.project_root }}
          push: true
          file: ${{ matrix.project_root }}/${{ matrix.dockerfile }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          #cache-from: type=gha
          #cache-to: type=gha,mode=max
      - name: Publish
        run: cd ${{ matrix.project_root }} && dotnet publish ${{ matrix.path }}/${{ matrix.name }}.csproj -o ../../out/${{ matrix.name }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: out/${{ matrix.name }}
          retention-days: 1
  dispatch:
    runs-on: aismart-runner
    needs: publish-build-and-push-image
    steps:
      - name: Deploy
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOK }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'AElfDevops',
              repo: 'devops',
              workflow_id: 'aevatar-station-deploy.yaml',
              ref: 'main',
              inputs: {
                env: 'staging',
                commit_sha: 'sha-${{ needs.publish-build-and-push-image.outputs.short_sha }}',
              }
            }) 