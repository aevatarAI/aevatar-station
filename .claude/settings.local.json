{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(chmod:*)",
      "Bash(dotnet build)",
      "Bash(dotnet build:*)",
      "Bash(dotnet run:*)",
      "Bash(ls:*)",
      "Bash(./cleanup-unused-files.sh:*)",
      "mcp__ide__executeCode",
      "mcp__sequentialthinking__sequentialthinking",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh pr create:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(dotnet test:*)",
      "Bash(dotnet list:*)",
      "Bash(dotnet restore:*)",
      "Bash(dotnet nuget locals:*)",
      "Bash(dotnet publish:*)",
      "Bash(./run-regression-tests.sh:*)",
      "Bash(docker-compose:*)",
      "Bash(kubectl --kubeconfig=/Users/zhifenglee/Desktop/agent-smith/aevatar-station/aevatar-station/station/scripts/kubeconfig get nodes)",
      "Bash(kubectl --kubeconfig=/Users/zhifenglee/Desktop/agent-smith/aevatar-station/aevatar-station/station/scripts/kubeconfig create namespace aevatar-apps)",
      "Bash(kubectl:*)",
      "Bash(docker build:*)",
      "Bash(docker system prune:*)",
      "Bash(KUBECONFIG=/Users/zhifenglee/Desktop/agent-smith/aevatar-station/aevatar-station/station/scripts/kubeconfig python3 test_kubernetes.py)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "Bash(cp:*)",
      "Bash(sed:*)",
      "Bash(KUBECONFIG=/Users/zhifenglee/Desktop/agent-smith/aevatar-station/aevatar-station/station/scripts/shared/kubeconfig python3 test_kubernetes.py)",
      "Bash(python:*)",
      "Bash(./station/scripts/run-regression-tests.sh:*)",
      "Bash(docker volume prune:*)",
      "Bash(docker network inspect:*)",
      "Bash(docker inspect:*)",
      "Bash(curl:*)",
      "Bash(ConnectionStrings__Default=\"mongodb://admin:password123@localhost:27017/AevatarAuth?authSource=admin&retryWrites=false\" dotnet run)",
      "Bash(docker port:*)",
      "Bash(docker run:*)",
      "Bash(docker restart:*)",
      "Bash(gh api:*)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\necho \"\"Token response: $TOKEN_RESPONSE\"\"\n\n# Extract token using sed/grep\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | grep -o ''\"\"access_token\"\":\"\"[^\"\"]*\"\"'' | cut -d''\"\"'' -f4)\n\necho \"\"Extracted token: ${TOKEN:0:50}...\"\"\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    # Test client registration with new token\n    curl -v -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d ''''\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(docker:*)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\necho \"\"Token response: $TOKEN_RESPONSE\"\"\n\n# Extract token using sed/grep\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | grep -o ''\"\"access_token\"\":\"\"[^\"\"]*\"\"'' | cut -d''\"\"'' -f4)\n\necho \"\"Extracted token: ${TOKEN:0:50}...\"\"\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    # Test client registration with new token\n    curl -v -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d ''''\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\necho \"\"Token response: $TOKEN_RESPONSE\"\"\n\n# Extract token using sed/grep with better regex\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | sed -n ''s/.*\"\"access_token\"\":\"\"\\([^\"\"]*\\)\"\".*/\\1/p'')\n\necho \"\"Extracted token: ${TOKEN:0:50}...\"\"\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Token extraction successful, testing client registration...\"\"\n    # Test client registration with new token\n    curl -v -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d ''''\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\necho \"\"Token response: $TOKEN_RESPONSE\"\"\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\necho \"\"Extracted token: $TOKEN\"\"\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Token extraction successful, testing client registration...\"\"\n    # Test client registration with new token\n    curl -v -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d ''''\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\necho \"\"Token response received\"\"\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\necho \"\"Extracted token: ${TOKEN:0:50}...\"\"\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Token extraction successful, testing client registration...\"\"\n    # Test client registration with new token\n    curl -v -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d ''''\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing client registration...\"\"\n    # Test client registration with new token - simplified output\n    HTTP_STATUS=$(curl --silent --write-out \"\"%{http_code}\"\" --output /dev/null \\\n      -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d '''')\n    \n    echo \"\"HTTP Status: $HTTP_STATUS\"\"\n    \n    if [ \"\"$HTTP_STATUS\"\" = \"\"200\"\" ] || [ \"\"$HTTP_STATUS\"\" = \"\"201\"\" ]; then\n        echo \"\"✓ Client registration successful!\"\"\n    elif [ \"\"$HTTP_STATUS\"\" = \"\"409\"\" ]; then\n        echo \"\"✓ Client already exists (which is fine)\"\"\n    else\n        echo \"\"✗ Client registration failed with status $HTTP_STATUS\"\"\n    fi\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing client registration...\"\"\n    # Test client registration with new token - with response body\n    RESPONSE=$(curl --silent --write-out \"\"HTTP_STATUS:%{http_code}\"\" \\\n      -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d '''')\n    \n    HTTP_STATUS=$(echo \"\"$RESPONSE\"\" | grep -o \"\"HTTP_STATUS:[0-9]*\"\" | cut -d: -f2)\n    RESPONSE_BODY=$(echo \"\"$RESPONSE\"\" | sed ''s/HTTP_STATUS:[0-9]*$//'')\n    \n    echo \"\"HTTP Status: $HTTP_STATUS\"\"\n    echo \"\"Response: $RESPONSE_BODY\"\"\n    \n    if [ \"\"$HTTP_STATUS\"\" = \"\"200\"\" ] || [ \"\"$HTTP_STATUS\"\" = \"\"201\"\" ]; then\n        echo \"\"✓ Client registration successful!\"\"\n    elif [ \"\"$HTTP_STATUS\"\" = \"\"409\"\" ]; then\n        echo \"\"✓ Client already exists (which is fine)\"\"\n    else\n        echo \"\"✗ Client registration failed with status $HTTP_STATUS\"\"\n    fi\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing client registration...\"\"\n    # Test client registration with new token - with response body\n    RESPONSE=$(curl --silent --write-out \"\"HTTP_STATUS:%{http_code}\"\" \\\n      -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d '''')\n    \n    HTTP_STATUS=$(echo \"\"$RESPONSE\"\" | grep -o \"\"HTTP_STATUS:[0-9]*\"\" | cut -d: -f2)\n    RESPONSE_BODY=$(echo \"\"$RESPONSE\"\" | sed ''s/HTTP_STATUS:[0-9]*$//'')\n    \n    echo \"\"HTTP Status: $HTTP_STATUS\"\"\n    echo \"\"Response: $RESPONSE_BODY\"\"\n    \n    if [ \"\"$HTTP_STATUS\"\" = \"\"200\"\" ] || [ \"\"$HTTP_STATUS\"\" = \"\"201\"\" ]; then\n        echo \"\"✓ Client registration successful!\"\"\n    elif [ \"\"$HTTP_STATUS\"\" = \"\"409\"\" ]; then\n        echo \"\"✓ Client already exists (which is fine)\"\"\n    else\n        echo \"\"✗ Client registration failed with status $HTTP_STATUS\"\"\n    fi\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(timeout:*)",
      "Bash(# Get a fresh token properly\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing client registration with detailed response...\"\"\n    # Test client registration with new token - with detailed response\n    RESPONSE=$(curl --silent --write-out \"\"HTTP_STATUS:%{http_code}\"\" \\\n      -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d '''')\n    \n    HTTP_STATUS=$(echo \"\"$RESPONSE\"\" | grep -o \"\"HTTP_STATUS:[0-9]*\"\" | cut -d: -f2)\n    RESPONSE_BODY=$(echo \"\"$RESPONSE\"\" | sed ''s/HTTP_STATUS:[0-9]*$//'')\n    \n    echo \"\"HTTP Status: $HTTP_STATUS\"\"\n    echo \"\"Response Body: $RESPONSE_BODY\"\"\n    \n    if [ \"\"$HTTP_STATUS\"\" = \"\"200\"\" ] || [ \"\"$HTTP_STATUS\"\" = \"\"201\"\" ]; then\n        echo \"\"✓ Client registration successful!\"\"\n    elif [ \"\"$HTTP_STATUS\"\" = \"\"409\"\" ]; then\n        echo \"\"✓ Client already exists (which is fine)\"\"\n    else\n        echo \"\"✗ Client registration failed with status $HTTP_STATUS\"\"\n    fi\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token and immediately test client registration\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing client registration immediately with fresh token...\"\"\n    # Test client registration immediately with fresh token\n    RESPONSE=$(curl --silent --write-out \"\"HTTP_STATUS:%{http_code}\"\" \\\n      -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d '''')\n    \n    HTTP_STATUS=$(echo \"\"$RESPONSE\"\" | grep -o \"\"HTTP_STATUS:[0-9]*\"\" | cut -d: -f2)\n    RESPONSE_BODY=$(echo \"\"$RESPONSE\"\" | sed ''s/HTTP_STATUS:[0-9]*$//'')\n    \n    echo \"\"HTTP Status: $HTTP_STATUS\"\"\n    echo \"\"Response Body: $RESPONSE_BODY\"\"\n    \n    if [ \"\"$HTTP_STATUS\"\" = \"\"200\"\" ] || [ \"\"$HTTP_STATUS\"\" = \"\"201\"\" ]; then\n        echo \"\"✓ Client registration successful!\"\"\n    elif [ \"\"$HTTP_STATUS\"\" = \"\"409\"\" ]; then\n        echo \"\"✓ Client already exists (which is fine)\"\"\n    else\n        echo \"\"✗ Client registration failed with status $HTTP_STATUS\"\"\n    fi\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Get a fresh token and immediately test client registration\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\n# Extract token using awk\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing client registration with updated JWT settings...\"\"\n    # Test client registration immediately with fresh token\n    RESPONSE=$(curl --silent --write-out \"\"HTTP_STATUS:%{http_code}\"\" \\\n      -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d '''')\n    \n    HTTP_STATUS=$(echo \"\"$RESPONSE\"\" | grep -o \"\"HTTP_STATUS:[0-9]*\"\" | cut -d: -f2)\n    RESPONSE_BODY=$(echo \"\"$RESPONSE\"\" | sed ''s/HTTP_STATUS:[0-9]*$//'')\n    \n    echo \"\"HTTP Status: $HTTP_STATUS\"\"\n    echo \"\"Response Body: $RESPONSE_BODY\"\"\n    \n    if [ \"\"$HTTP_STATUS\"\" = \"\"200\"\" ] || [ \"\"$HTTP_STATUS\"\" = \"\"201\"\" ]; then\n        echo \"\"✓ Client registration successful!\"\"\n    elif [ \"\"$HTTP_STATUS\"\" = \"\"409\"\" ]; then\n        echo \"\"✓ Client already exists (which is fine)\"\"\n    else\n        echo \"\"✗ Client registration failed with status $HTTP_STATUS\"\"\n    fi\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(# Simulate the URL construction logic from the script\nTEST_CLIENT_ID=\"\"AevatarTestClient\"\"\nTEST_CLIENT_SECRET=\"\"test-secret-key\"\"\nCORS_URLS=\"\"http://localhost:3000,http://localhost:3001\"\"\n\n# URL encode CORS URLs (simple method as script does when jq is not available)\ncors_urls_encoded=$(printf \"\"%s\"\" \"\"$CORS_URLS\"\" | sed ''s/ /%20/g'' | sed ''s/,/%2C/g'')\necho \"\"CORS URLs original: $CORS_URLS\"\"\necho \"\"CORS URLs encoded: $cors_urls_encoded\"\"\n\n# Construct full URL\napi_url=\"\"http://localhost:8080\"\"\nfull_url=\"\"$api_url/api/users/registerClient?clientId=$TEST_CLIENT_ID&clientSecret=$TEST_CLIENT_SECRET&corsUrls=$cors_urls_encoded\"\"\necho \"\"Full URL: $full_url\"\")",
      "Bash(# Get token first (simulating the script logic)\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing request with different formats...\"\"\n    \n    # Test 1: The current way (POST with empty body and JSON content-type)\n    echo \"\"=== Test 1: POST with empty body and JSON content-type ===\"\"\n    curl -v -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d ''''\nelse\n    echo \"\"Failed to get token\"\"\nfi)",
      "Bash(# Check current timestamps and decode the JWT to understand the timing\necho \"\"Current timestamp: $(date +%s)\"\"\necho \"\"Token response timestamp: $(date)\"\"\n\n# Let''s get a fresh token and use it immediately\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\necho \"\"Fresh token obtained at: $(date)\"\"\necho \"\"Token (first 50 chars): ${TOKEN:0:50}...\"\"\n\n# Immediately test the registration\necho \"\"Making immediate request...\"\"\ncurl -s -w \"\"HTTP Status: %{http_code}\\n\"\" \\\n  -X POST \\\n  \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n  -H ''Accept: */*'' \\\n  -H \"\"Authorization: Bearer $TOKEN\"\" \\\n  -H ''X-Requested-With: XMLHttpRequest'' \\\n  -H ''Content-Type: application/json'' \\\n  -d '''')",
      "Bash(# Get a fresh token and test immediately\nTOKEN_RESPONSE=$(docker run --rm --network=\"\"aevatar-regression_regression-network\"\" curlimages/curl:latest --silent --show-error --fail --connect-timeout 10 --max-time 30 ''http://authserver:8082/connect/token'' -H ''Content-Type: application/x-www-form-urlencoded'' -H ''Accept: application/json'' --data-urlencode ''grant_type=password'' --data-urlencode \"\"username=admin\"\" --data-urlencode \"\"password=1q2W3e*\"\" --data-urlencode ''scope=Aevatar'' --data-urlencode ''client_id=AevatarAuthServer'')\n\nTOKEN=$(echo \"\"$TOKEN_RESPONSE\"\" | awk -F''\"\"'' ''/access_token/{print $4}'')\n\nif [ -n \"\"$TOKEN\"\" ] && [ \"\"$TOKEN\"\" != \"\"null\"\" ]; then\n    echo \"\"Testing client registration with lifetime validation disabled...\"\"\n    RESPONSE=$(curl --silent --write-out \"\"HTTP_STATUS:%{http_code}\"\" \\\n      -X POST \\\n      \"\"http://localhost:8080/api/users/registerClient?clientId=AevatarTestClient&clientSecret=test-secret-key&corsUrls=http%3A//localhost%3A3000%2Chttp%3A//localhost%3A3001\"\" \\\n      -H ''Accept: */*'' \\\n      -H \"\"Authorization: Bearer $TOKEN\"\" \\\n      -H ''X-Requested-With: XMLHttpRequest'' \\\n      -H ''Content-Type: application/json'' \\\n      -d '''')\n    \n    HTTP_STATUS=$(echo \"\"$RESPONSE\"\" | grep -o \"\"HTTP_STATUS:[0-9]*\"\" | cut -d: -f2)\n    RESPONSE_BODY=$(echo \"\"$RESPONSE\"\" | sed ''s/HTTP_STATUS:[0-9]*$//'')\n    \n    echo \"\"HTTP Status: $HTTP_STATUS\"\"\n    echo \"\"Response Body: $RESPONSE_BODY\"\"\n    \n    if [ \"\"$HTTP_STATUS\"\" = \"\"200\"\" ] || [ \"\"$HTTP_STATUS\"\" = \"\"201\"\" ]; then\n        echo \"\"✓ Client registration successful!\"\"\n    elif [ \"\"$HTTP_STATUS\"\" = \"\"409\"\" ]; then\n        echo \"\"✓ Client already exists (which is fine)\"\"\n    else\n        echo \"\"✗ Client registration failed with status $HTTP_STATUS\"\"\n    fi\nelse\n    echo \"\"Failed to extract token\"\"\nfi)",
      "Bash(bash:*)"
    ]
  },
  "enableAllProjectMcpServers": true
}