name: Package Staging

on:
  push:
    branches:
      - "feature/workflow-cosign"

run-name: Deploy Aevatar Station on ${{ github.ref }} to Staging from ${{ github.sha }}

env:
  DOTNET_INSTALL_DIR: "./.dotnet"

concurrency:
  group: workflow-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: aismart-runner
    strategy:
      matrix:
        servicename:
          [
            Aevatar.HttpApi.Host,
            # Aevatar.Silo,
            # Aevatar.AuthServer,
            # Aevatar.WebHook.Host,
          ]
    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET 9 SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
    
      # Cache NuGet packages to speed up builds
      - name: Cache NuGet Packages
        id: nuget-packages
        uses: actions/cache@v4
        env:
          cache-name: nuget-package-cache
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.servicename }}

      # Publish .NET project
      - name: Publish .NET project      
        run: dotnet publish station/src/${{ matrix.servicename }}/${{ matrix.servicename }}.csproj -o out/${{ matrix.servicename }}
      
      # Upload build artifacts for the next job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.servicename }}
          path: out/${{ matrix.servicename }}
          retention-days: 1

  build-and-push-image:
    needs: publish
    runs-on: aismart-runner
    strategy:
      matrix:
        servicename:
          [
            Aevatar.HttpApi.Host,
            # Aevatar.Silo,
            # Aevatar.AuthServer,
            # Aevatar.WebHook.Host,
          ]
    permissions:
      contents: read
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      # Checkout code (used for Docker build context)
      - name: Checkout
        uses: actions/checkout@v4

      # Extract short SHA for versioning
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "short_sha=$calculatedSha" >> "$GITHUB_OUTPUT"

      # Download published build artifact
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.servicename }}
          path: out/${{ matrix.servicename }}

      # Generate image tag metadata
      - name: Create image tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REPOSITORY_REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPOSITORY }}/${{ matrix.servicename }}
          tags: |
            type=sha

      # Setup Docker Buildx (multi-platform builds & cache support)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            servicename=${{ matrix.servicename }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Install Cosign CLI for signing
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      # Install Crane to get image digest
      - name: Install Crane (for digest lookup)
        run: |
          curl -sSL https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz -o crane.tar.gz
          sudo tar -xzvf crane.tar.gz -C /usr/local/bin crane
    
      # Extract image digest from registry
      - name: Extract image digest
        id: digest
        run: |
          DIGEST=$(crane digest "${{ steps.meta.outputs.tags }}")
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      # Sign image digest using Cosign
      - name: Cosign sign image
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign "${{ steps.meta.outputs.tags }}@${{ steps.digest.outputs.digest }}"

      # (Optional) Verify signature immediately to confirm it was signed correctly
      - name: Cosign verify signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign verify --keyless \
            --certificate-oidc-issuer https://accounts.google.com \
            "${{ steps.meta.outputs.tags }}@${{ steps.digest.outputs.digest }}"

  # dispatch:
  #   runs-on: aismart-runner
  #   needs: build-and-push-image
  #   steps:
  #     - name: Deploy
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{ secrets.TOK }}
  #         script: |
  #           await github.rest.actions.createWorkflowDispatch({
  #             owner: 'AElfDevops',
  #             repo: 'devops',
  #             workflow_id: 'aevatar-station-deploy.yaml',
  #             ref: 'main',
  #             inputs: {
  #               env: 'staging',
  #               commit_sha: 'sha-${{ needs.build-and-push-image.outputs.short_sha }}',
  #             }
  #           })